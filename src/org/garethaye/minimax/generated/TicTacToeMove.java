/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.garethaye.minimax.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A struct containing a TicTacToe move specified by integer row and col
 */
public class TicTacToeMove implements org.apache.thrift.TBase<TicTacToeMove, TicTacToeMove._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TicTacToeMove");

  private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COL_FIELD_DESC = new org.apache.thrift.protocol.TField("col", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TicTacToeMoveStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TicTacToeMoveTupleSchemeFactory());
  }

  private int row; // required
  private int col; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROW((short)1, "row"),
    COL((short)2, "col");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROW
          return ROW;
        case 2: // COL
          return COL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROW_ISSET_ID = 0;
  private static final int __COL_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW, new org.apache.thrift.meta_data.FieldMetaData("row", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COL, new org.apache.thrift.meta_data.FieldMetaData("col", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TicTacToeMove.class, metaDataMap);
  }

  public TicTacToeMove() {
  }

  public TicTacToeMove(
    int row,
    int col)
  {
    this();
    this.row = row;
    setRowIsSet(true);
    this.col = col;
    setColIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TicTacToeMove(TicTacToeMove other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.row = other.row;
    this.col = other.col;
  }

  public TicTacToeMove deepCopy() {
    return new TicTacToeMove(this);
  }

  public void clear() {
    setRowIsSet(false);
    this.row = 0;
    setColIsSet(false);
    this.col = 0;
  }

  public int getRow() {
    return this.row;
  }

  public TicTacToeMove setRow(int row) {
    this.row = row;
    setRowIsSet(true);
    return this;
  }

  public void unsetRow() {
    __isset_bit_vector.clear(__ROW_ISSET_ID);
  }

  /** Returns true if field row is set (has been assigned a value) and false otherwise */
  public boolean isSetRow() {
    return __isset_bit_vector.get(__ROW_ISSET_ID);
  }

  public void setRowIsSet(boolean value) {
    __isset_bit_vector.set(__ROW_ISSET_ID, value);
  }

  public int getCol() {
    return this.col;
  }

  public TicTacToeMove setCol(int col) {
    this.col = col;
    setColIsSet(true);
    return this;
  }

  public void unsetCol() {
    __isset_bit_vector.clear(__COL_ISSET_ID);
  }

  /** Returns true if field col is set (has been assigned a value) and false otherwise */
  public boolean isSetCol() {
    return __isset_bit_vector.get(__COL_ISSET_ID);
  }

  public void setColIsSet(boolean value) {
    __isset_bit_vector.set(__COL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROW:
      if (value == null) {
        unsetRow();
      } else {
        setRow((Integer)value);
      }
      break;

    case COL:
      if (value == null) {
        unsetCol();
      } else {
        setCol((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW:
      return Integer.valueOf(getRow());

    case COL:
      return Integer.valueOf(getCol());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROW:
      return isSetRow();
    case COL:
      return isSetCol();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TicTacToeMove)
      return this.equals((TicTacToeMove)that);
    return false;
  }

  public boolean equals(TicTacToeMove that) {
    if (that == null)
      return false;

    boolean this_present_row = true;
    boolean that_present_row = true;
    if (this_present_row || that_present_row) {
      if (!(this_present_row && that_present_row))
        return false;
      if (this.row != that.row)
        return false;
    }

    boolean this_present_col = true;
    boolean that_present_col = true;
    if (this_present_col || that_present_col) {
      if (!(this_present_col && that_present_col))
        return false;
      if (this.col != that.col)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_row = true;
    builder.append(present_row);
    if (present_row)
      builder.append(row);

    boolean present_col = true;
    builder.append(present_col);
    if (present_col)
      builder.append(col);

    return builder.toHashCode();
  }

  public int compareTo(TicTacToeMove other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TicTacToeMove typedOther = (TicTacToeMove)other;

    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol()).compareTo(typedOther.isSetCol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col, typedOther.col);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TicTacToeMove(");
    boolean first = true;

    sb.append("row:");
    sb.append(this.row);
    first = false;
    if (!first) sb.append(", ");
    sb.append("col:");
    sb.append(this.col);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'row' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'col' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class TicTacToeMoveStandardSchemeFactory implements SchemeFactory {
    public TicTacToeMoveStandardScheme getScheme() {
      return new TicTacToeMoveStandardScheme();
    }
  }

  private static class TicTacToeMoveStandardScheme extends StandardScheme<TicTacToeMove> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TicTacToeMove struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.row = iprot.readI32();
              struct.setRowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.col = iprot.readI32();
              struct.setColIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRow()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'row' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCol()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'col' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TicTacToeMove struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROW_FIELD_DESC);
      oprot.writeI32(struct.row);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COL_FIELD_DESC);
      oprot.writeI32(struct.col);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TicTacToeMoveTupleSchemeFactory implements SchemeFactory {
    public TicTacToeMoveTupleScheme getScheme() {
      return new TicTacToeMoveTupleScheme();
    }
  }

  private static class TicTacToeMoveTupleScheme extends TupleScheme<TicTacToeMove> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TicTacToeMove struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.row);
      oprot.writeI32(struct.col);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TicTacToeMove struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.row = iprot.readI32();
      struct.setRowIsSet(true);
      struct.col = iprot.readI32();
      struct.setColIsSet(true);
    }
  }

}

