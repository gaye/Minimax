/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.garethaye.minimax.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GameStateAndMove implements org.apache.thrift.TBase<GameStateAndMove, GameStateAndMove._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GameStateAndMove");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("move", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameStateAndMoveStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameStateAndMoveTupleSchemeFactory());
  }

  private GameState state; // required
  private Move move; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATE((short)1, "state"),
    MOVE((short)2, "move");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // MOVE
          return MOVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameState.class)));
    tmpMap.put(_Fields.MOVE, new org.apache.thrift.meta_data.FieldMetaData("move", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Move.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameStateAndMove.class, metaDataMap);
  }

  public GameStateAndMove() {
  }

  public GameStateAndMove(
    GameState state,
    Move move)
  {
    this();
    this.state = state;
    this.move = move;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameStateAndMove(GameStateAndMove other) {
    if (other.isSetState()) {
      this.state = new GameState(other.state);
    }
    if (other.isSetMove()) {
      this.move = new Move(other.move);
    }
  }

  public GameStateAndMove deepCopy() {
    return new GameStateAndMove(this);
  }

  public void clear() {
    this.state = null;
    this.move = null;
  }

  public GameState getState() {
    return this.state;
  }

  public GameStateAndMove setState(GameState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public Move getMove() {
    return this.move;
  }

  public GameStateAndMove setMove(Move move) {
    this.move = move;
    return this;
  }

  public void unsetMove() {
    this.move = null;
  }

  /** Returns true if field move is set (has been assigned a value) and false otherwise */
  public boolean isSetMove() {
    return this.move != null;
  }

  public void setMoveIsSet(boolean value) {
    if (!value) {
      this.move = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((GameState)value);
      }
      break;

    case MOVE:
      if (value == null) {
        unsetMove();
      } else {
        setMove((Move)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case MOVE:
      return getMove();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case MOVE:
      return isSetMove();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameStateAndMove)
      return this.equals((GameStateAndMove)that);
    return false;
  }

  public boolean equals(GameStateAndMove that) {
    if (that == null)
      return false;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_move = true && this.isSetMove();
    boolean that_present_move = true && that.isSetMove();
    if (this_present_move || that_present_move) {
      if (!(this_present_move && that_present_move))
        return false;
      if (!this.move.equals(that.move))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_state = true && (isSetState());
    builder.append(present_state);
    if (present_state)
      builder.append(state);

    boolean present_move = true && (isSetMove());
    builder.append(present_move);
    if (present_move)
      builder.append(move);

    return builder.toHashCode();
  }

  public int compareTo(GameStateAndMove other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GameStateAndMove typedOther = (GameStateAndMove)other;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMove()).compareTo(typedOther.isSetMove());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMove()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.move, typedOther.move);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameStateAndMove(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("move:");
    if (this.move == null) {
      sb.append("null");
    } else {
      sb.append(this.move);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class GameStateAndMoveStandardSchemeFactory implements SchemeFactory {
    public GameStateAndMoveStandardScheme getScheme() {
      return new GameStateAndMoveStandardScheme();
    }
  }

  private static class GameStateAndMoveStandardScheme extends StandardScheme<GameStateAndMove> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameStateAndMove struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.state = new GameState();
              struct.state.read(iprot);
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.move = new Move();
              struct.move.read(iprot);
              struct.setMoveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameStateAndMove struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        struct.state.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.move != null) {
        oprot.writeFieldBegin(MOVE_FIELD_DESC);
        struct.move.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameStateAndMoveTupleSchemeFactory implements SchemeFactory {
    public GameStateAndMoveTupleScheme getScheme() {
      return new GameStateAndMoveTupleScheme();
    }
  }

  private static class GameStateAndMoveTupleScheme extends TupleScheme<GameStateAndMove> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameStateAndMove struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetMove()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetState()) {
        struct.state.write(oprot);
      }
      if (struct.isSetMove()) {
        struct.move.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameStateAndMove struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.state = new GameState();
        struct.state.read(iprot);
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.move = new Move();
        struct.move.read(iprot);
        struct.setMoveIsSet(true);
      }
    }
  }

}

