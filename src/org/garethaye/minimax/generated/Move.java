/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.garethaye.minimax.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Move extends org.apache.thrift.TUnion<Move, Move._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Move");
  private static final org.apache.thrift.protocol.TField TIC_TAC_TOE_MOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticTacToeMove", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONNECT_FOUR_MOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("connectFourMove", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIC_TAC_TOE_MOVE((short)1, "ticTacToeMove"),
    CONNECT_FOUR_MOVE((short)2, "connectFourMove");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIC_TAC_TOE_MOVE
          return TIC_TAC_TOE_MOVE;
        case 2: // CONNECT_FOUR_MOVE
          return CONNECT_FOUR_MOVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIC_TAC_TOE_MOVE, new org.apache.thrift.meta_data.FieldMetaData("ticTacToeMove", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.garethaye.minimax.generated.TicTacToeMove.class)));
    tmpMap.put(_Fields.CONNECT_FOUR_MOVE, new org.apache.thrift.meta_data.FieldMetaData("connectFourMove", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.garethaye.minimax.generated.ConnectFourMove.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Move.class, metaDataMap);
  }

  public Move() {
    super();
  }

  public Move(_Fields setField, Object value) {
    super(setField, value);
  }

  public Move(Move other) {
    super(other);
  }
  public Move deepCopy() {
    return new Move(this);
  }

  public static Move ticTacToeMove(org.garethaye.minimax.generated.TicTacToeMove value) {
    Move x = new Move();
    x.setTicTacToeMove(value);
    return x;
  }

  public static Move connectFourMove(org.garethaye.minimax.generated.ConnectFourMove value) {
    Move x = new Move();
    x.setConnectFourMove(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case TIC_TAC_TOE_MOVE:
        if (value instanceof org.garethaye.minimax.generated.TicTacToeMove) {
          break;
        }
        throw new ClassCastException("Was expecting value of type org.garethaye.minimax.generated.TicTacToeMove for field 'ticTacToeMove', but got " + value.getClass().getSimpleName());
      case CONNECT_FOUR_MOVE:
        if (value instanceof org.garethaye.minimax.generated.ConnectFourMove) {
          break;
        }
        throw new ClassCastException("Was expecting value of type org.garethaye.minimax.generated.ConnectFourMove for field 'connectFourMove', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TIC_TAC_TOE_MOVE:
          if (field.type == TIC_TAC_TOE_MOVE_FIELD_DESC.type) {
            org.garethaye.minimax.generated.TicTacToeMove ticTacToeMove;
            ticTacToeMove = new org.garethaye.minimax.generated.TicTacToeMove();
            ticTacToeMove.read(iprot);
            return ticTacToeMove;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CONNECT_FOUR_MOVE:
          if (field.type == CONNECT_FOUR_MOVE_FIELD_DESC.type) {
            org.garethaye.minimax.generated.ConnectFourMove connectFourMove;
            connectFourMove = new org.garethaye.minimax.generated.ConnectFourMove();
            connectFourMove.read(iprot);
            return connectFourMove;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TIC_TAC_TOE_MOVE:
        org.garethaye.minimax.generated.TicTacToeMove ticTacToeMove = (org.garethaye.minimax.generated.TicTacToeMove)value_;
        ticTacToeMove.write(oprot);
        return;
      case CONNECT_FOUR_MOVE:
        org.garethaye.minimax.generated.ConnectFourMove connectFourMove = (org.garethaye.minimax.generated.ConnectFourMove)value_;
        connectFourMove.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TIC_TAC_TOE_MOVE:
          org.garethaye.minimax.generated.TicTacToeMove ticTacToeMove;
          ticTacToeMove = new org.garethaye.minimax.generated.TicTacToeMove();
          ticTacToeMove.read(iprot);
          return ticTacToeMove;
        case CONNECT_FOUR_MOVE:
          org.garethaye.minimax.generated.ConnectFourMove connectFourMove;
          connectFourMove = new org.garethaye.minimax.generated.ConnectFourMove();
          connectFourMove.read(iprot);
          return connectFourMove;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TIC_TAC_TOE_MOVE:
        org.garethaye.minimax.generated.TicTacToeMove ticTacToeMove = (org.garethaye.minimax.generated.TicTacToeMove)value_;
        ticTacToeMove.write(oprot);
        return;
      case CONNECT_FOUR_MOVE:
        org.garethaye.minimax.generated.ConnectFourMove connectFourMove = (org.garethaye.minimax.generated.ConnectFourMove)value_;
        connectFourMove.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TIC_TAC_TOE_MOVE:
        return TIC_TAC_TOE_MOVE_FIELD_DESC;
      case CONNECT_FOUR_MOVE:
        return CONNECT_FOUR_MOVE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public org.garethaye.minimax.generated.TicTacToeMove getTicTacToeMove() {
    if (getSetField() == _Fields.TIC_TAC_TOE_MOVE) {
      return (org.garethaye.minimax.generated.TicTacToeMove)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'ticTacToeMove' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTicTacToeMove(org.garethaye.minimax.generated.TicTacToeMove value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TIC_TAC_TOE_MOVE;
    value_ = value;
  }

  public org.garethaye.minimax.generated.ConnectFourMove getConnectFourMove() {
    if (getSetField() == _Fields.CONNECT_FOUR_MOVE) {
      return (org.garethaye.minimax.generated.ConnectFourMove)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'connectFourMove' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setConnectFourMove(org.garethaye.minimax.generated.ConnectFourMove value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CONNECT_FOUR_MOVE;
    value_ = value;
  }

  public boolean isSetTicTacToeMove() {
    return setField_ == _Fields.TIC_TAC_TOE_MOVE;
  }


  public boolean isSetConnectFourMove() {
    return setField_ == _Fields.CONNECT_FOUR_MOVE;
  }


  public boolean equals(Object other) {
    if (other instanceof Move) {
      return equals((Move)other);
    } else {
      return false;
    }
  }

  public boolean equals(Move other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Move other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }


}
