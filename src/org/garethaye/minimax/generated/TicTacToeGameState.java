/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.garethaye.minimax.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A struct containing a 2d array used to represent a TicTacToe board
 */
public class TicTacToeGameState implements org.apache.thrift.TBase<TicTacToeGameState, TicTacToeGameState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TicTacToeGameState");

  private static final org.apache.thrift.protocol.TField BOARD_FIELD_DESC = new org.apache.thrift.protocol.TField("board", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TicTacToeGameStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TicTacToeGameStateTupleSchemeFactory());
  }

  private List<List<Integer>> board; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOARD((short)1, "board");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOARD
          return BOARD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOARD, new org.apache.thrift.meta_data.FieldMetaData("board", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TicTacToeGameState.class, metaDataMap);
  }

  public TicTacToeGameState() {
  }

  public TicTacToeGameState(
    List<List<Integer>> board)
  {
    this();
    this.board = board;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TicTacToeGameState(TicTacToeGameState other) {
    if (other.isSetBoard()) {
      List<List<Integer>> __this__board = new ArrayList<List<Integer>>();
      for (List<Integer> other_element : other.board) {
        List<Integer> __this__board_copy = new ArrayList<Integer>();
        for (Integer other_element_element : other_element) {
          __this__board_copy.add(other_element_element);
        }
        __this__board.add(__this__board_copy);
      }
      this.board = __this__board;
    }
  }

  public TicTacToeGameState deepCopy() {
    return new TicTacToeGameState(this);
  }

  public void clear() {
    this.board = null;
  }

  public int getBoardSize() {
    return (this.board == null) ? 0 : this.board.size();
  }

  public java.util.Iterator<List<Integer>> getBoardIterator() {
    return (this.board == null) ? null : this.board.iterator();
  }

  public void addToBoard(List<Integer> elem) {
    if (this.board == null) {
      this.board = new ArrayList<List<Integer>>();
    }
    this.board.add(elem);
  }

  public List<List<Integer>> getBoard() {
    return this.board;
  }

  public TicTacToeGameState setBoard(List<List<Integer>> board) {
    this.board = board;
    return this;
  }

  public void unsetBoard() {
    this.board = null;
  }

  /** Returns true if field board is set (has been assigned a value) and false otherwise */
  public boolean isSetBoard() {
    return this.board != null;
  }

  public void setBoardIsSet(boolean value) {
    if (!value) {
      this.board = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOARD:
      if (value == null) {
        unsetBoard();
      } else {
        setBoard((List<List<Integer>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOARD:
      return getBoard();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOARD:
      return isSetBoard();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TicTacToeGameState)
      return this.equals((TicTacToeGameState)that);
    return false;
  }

  public boolean equals(TicTacToeGameState that) {
    if (that == null)
      return false;

    boolean this_present_board = true && this.isSetBoard();
    boolean that_present_board = true && that.isSetBoard();
    if (this_present_board || that_present_board) {
      if (!(this_present_board && that_present_board))
        return false;
      if (!this.board.equals(that.board))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_board = true && (isSetBoard());
    builder.append(present_board);
    if (present_board)
      builder.append(board);

    return builder.toHashCode();
  }

  public int compareTo(TicTacToeGameState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TicTacToeGameState typedOther = (TicTacToeGameState)other;

    lastComparison = Boolean.valueOf(isSetBoard()).compareTo(typedOther.isSetBoard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.board, typedOther.board);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TicTacToeGameState(");
    boolean first = true;

    sb.append("board:");
    if (this.board == null) {
      sb.append("null");
    } else {
      sb.append(this.board);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (board == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'board' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class TicTacToeGameStateStandardSchemeFactory implements SchemeFactory {
    public TicTacToeGameStateStandardScheme getScheme() {
      return new TicTacToeGameStateStandardScheme();
    }
  }

  private static class TicTacToeGameStateStandardScheme extends StandardScheme<TicTacToeGameState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TicTacToeGameState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOARD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.board = new ArrayList<List<Integer>>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  List<Integer> _elem2; // required
                  {
                    org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                    _elem2 = new ArrayList<Integer>(_list3.size);
                    for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                    {
                      int _elem5; // required
                      _elem5 = iprot.readI32();
                      _elem2.add(_elem5);
                    }
                    iprot.readListEnd();
                  }
                  struct.board.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setBoardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TicTacToeGameState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.board != null) {
        oprot.writeFieldBegin(BOARD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.board.size()));
          for (List<Integer> _iter6 : struct.board)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter6.size()));
              for (int _iter7 : _iter6)
              {
                oprot.writeI32(_iter7);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TicTacToeGameStateTupleSchemeFactory implements SchemeFactory {
    public TicTacToeGameStateTupleScheme getScheme() {
      return new TicTacToeGameStateTupleScheme();
    }
  }

  private static class TicTacToeGameStateTupleScheme extends TupleScheme<TicTacToeGameState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TicTacToeGameState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.board.size());
        for (List<Integer> _iter8 : struct.board)
        {
          {
            oprot.writeI32(_iter8.size());
            for (int _iter9 : _iter8)
            {
              oprot.writeI32(_iter9);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TicTacToeGameState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.board = new ArrayList<List<Integer>>(_list10.size);
        for (int _i11 = 0; _i11 < _list10.size; ++_i11)
        {
          List<Integer> _elem12; // required
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            _elem12 = new ArrayList<Integer>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              int _elem15; // required
              _elem15 = iprot.readI32();
              _elem12.add(_elem15);
            }
          }
          struct.board.add(_elem12);
        }
      }
      struct.setBoardIsSet(true);
    }
  }

}

